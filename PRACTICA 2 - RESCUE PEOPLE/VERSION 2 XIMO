from HAL import HAL
from GUI import GUI
import cv2
import math
import rospy

# Constants
VICTIMS_X = 30
VICTIMS_Y = -40
BOAT_X = 0
BOAT_Y = 0
X_VELOCITY = 0.25
ANGLE = 0.6
SPIRAL_ITERATIONS = 300
LANDING_MARGIN = 0.07
FACES_TO_DETECT = 6  # Add this line

# Variables
x_pos = 0
y_pos = 0
detected_faces = []
it = 0

# Create a cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')


# Function to detect faces
def detect_faces():
    global detected_faces
    frontal_image = HAL.get_frontal_image()
    gray_image = cv2.cvtColor(frontal_image, cv2.COLOR_BGR2GRAY)

    # Detect faces in the image
    faces = face_cascade.detectMultiScale(gray_image, scaleFactor=1.3, minNeighbors=5)

    # Clear the list of detected faces before adding new ones
    detected_faces.clear()

    # Add detected faces to the list
    for face in faces:
        detected_faces.append(face)


# Function to control the drone based on detected faces
def control_drone():
    global detected_faces

    # Your logic for drone control based on detected faces goes here
    # For example, calculate the distance and angle from the drone to the detected face
    # Adjust the drone's position or velocity accordingly
    pass


# Takeoff
HAL.takeoff(3)

# Main loop
while not ((VICTIMS_X - 1 <= x_pos <= VICTIMS_X + 1) and
            (VICTIMS_Y - 1 <= y_pos <= VICTIMS_Y + 1)):

    # Display images
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)

    # Update drone position
    x_pos, y_pos = HAL.get_position()[:2]

    # Set command position
    HAL.set_cmd_pos(VICTIMS_X, VICTIMS_Y, 3, ANGLE)

    # Face detection in the frontal image
    detect_faces()

    # Process detected faces and control the drone
    if len(detected_faces) == FACES_TO_DETECT:
        control_drone()

    # Sleep for a short duration
    rospy.sleep(0.25)

# Additional code for continuous image display
while True:
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)
    rospy.sleep(0.1)  # Adjust sleep duration as needed
