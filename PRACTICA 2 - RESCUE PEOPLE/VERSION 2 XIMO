from GUI import GUI
from HAL import HAL
import cv2
import random

# Constants
NUM_VICTIMS = 6

# Variables
x_vel = 0.25
angle = 0.6
confidence_threshold = 10000  # Adjust this threshold based on your scenario

# Start
x_pos, y_pos = HAL.get_position()[:2]

# Get Started
print("Get Started: Ensure the drone is powered on and ready to perform the rescue mission.")

# Takeoff
HAL.takeoff(3)

# Face Cascade Classifier
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Coordenadas predefinidas para las víctimas
VICTIMS_XY = [(30, -40), (35, -40), (40, -40), (30, -35), (35, -35), (40, -35)]

# Variables adicionales
search_radius = 5.0  # Radio de búsqueda alrededor de la primera víctima
face_detected = False  # Indica si se ha detectado una cara

# Main loop
victim_count = 0
detected_victims = set()
target_x, target_y = 0, 0  # Inicializar las variables de destino
while victim_count < NUM_VICTIMS:
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)

    x_pos, y_pos = HAL.get_position()[:2]
    print('Current Drone Position: x=%.2f, y=%.2f ' % (x_pos, y_pos), end='')

    if victim_count == NUM_VICTIMS:
        break

    # Si se ha detectado una cara, buscar alrededor de la primera víctima
    if face_detected:
        # Actualizar la posición de destino alrededor de la primera víctima
        target_x = random.uniform(target_x - search_radius, target_x + search_radius)
        target_y = random.uniform(target_y - search_radius, target_y + search_radius)
        HAL.set_cmd_pos(target_x, target_y, 3, angle)
    else:
        # Si no se ha detectado una cara, utilizar las coordenadas predefinidas
        target_x, target_y = VICTIMS_XY[victim_count]
        HAL.set_cmd_pos(target_x, target_y, 3, angle)

    # Face detection
    faces_frontal = face_cascade.detectMultiScale(
        cv2.cvtColor(frontal_image, cv2.COLOR_BGR2GRAY),
        scaleFactor=1.3,
        minNeighbors=5,
        minSize=(30, 30),
    )

    # Procesar caras detectadas
    if faces_frontal:
        face_detected = True  # Indicar que se ha detectado una cara
        print(' | Face Detected')
        for (fx, fy, fw, fh) in faces_frontal:
            if (fx, fy) not in detected_victims and (fw * fh) > confidence_threshold:
                print('Successful: Rescued participant at frontal cX: %.2f cy: %.2f' % (fx, fy))
                detected_victims.add((fx, fy))
                victim_count += 1

                # Dibujar un recuadro alrededor de la cara en la interfaz gráfica
                cv2.rectangle(frontal_image, (fx, fy), (fx + fw, fy + fh), (0, 255, 0), 2)
                GUI.showImage(frontal_image)
    else:
        face_detected = False
        print(' | No Face Detected')
# Additional code for continuous image display
while True:
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)
