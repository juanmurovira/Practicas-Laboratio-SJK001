from GUI import GUI
from HAL import HAL
import cv2
import math

# Constants
NUM_VICTIMS = 6
TAKEOFF_HEIGHT = 3
ANGLE = 0.6
CONFIDENCE_THRESHOLD = 10000
SPIRAL_ANGLE_INC = 0.174533
DISTANCE_INC = 0.5

# Functions
def move_to_target_location(target_x, target_y):
    while True:
        x_pos, y_pos = HAL.get_position()[:2]
        HAL.set_cmd_pos(target_x, target_y, TAKEOFF_HEIGHT, ANGLE)
        sqr_distance_to_target = (target_x - x_pos) ** 2 + (target_y - y_pos) ** 2
        if sqr_distance_to_target < 1:
            break

def detect_faces(ventral_image):
    detected_faces = []
    for im_angle in range(0, 365, 10):
        (h, w) = ventral_image.shape[:2]
        center = (w // 2, h // 2)
        M = cv2.getRotationMatrix2D(center, im_angle, 1.0)
        im_rot = cv2.warpAffine(ventral_image, M, (w, h))
        faces = face_cascade.detectMultiScale(
            cv2.cvtColor(im_rot, cv2.COLOR_BGR2GRAY),
            scaleFactor=1.1,
            minNeighbors=4,
            minSize=(30, 30),
        )
        if len(faces) > 0:
            detected_faces.extend(faces)
    return detected_faces

# Takeoff
HAL.takeoff(TAKEOFF_HEIGHT)

# Face Cascade Classifier
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Coordinates of the known survivor locations
safety_boat_coordinates = (430492, 4459162)
survivor_coordinates = (430532, 4459132)

# Calculate relative victims positions
victims_x = survivor_coordinates[1] - safety_boat_coordinates[1]
victims_y = survivor_coordinates[0] - safety_boat_coordinates[0]

# Main loop for moving to the target location
target_x, target_y = -victims_x, -victims_y
move_to_target_location(target_x, target_y)

# Main loop for face detection and search
victim_count = 0
detected_victims = set()
face_detected = False
spiral_angle = 0  

while victim_count < NUM_VICTIMS:
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)

    x_pos, y_pos = HAL.get_position()[:2]

    # Increment spiral angle and update search radius
    spiral_angle += SPIRAL_ANGLE_INC

    # Face detection
    detected_faces = detect_faces(ventral_image)

    # Process detected faces
    if detected_faces:
        if not face_detected:
            print('Face Detected. Current Drone Position: lat=%.8f, lon=%.8f ' % (x_pos, y_pos))
            face_detected = True
        for (fx, fy, fw, fh) in detected_faces:
            if (fx, fy) not in detected_victims and (fw * fh) > CONFIDENCE_THRESHOLD:
                print('Successful: Rescued participant at frontal cX: %.2f cy: %.2f' % (fx, fy))
                detected_victims.add((fx, fy))
                victim_count += 1
                cv2.rectangle(frontal_image, (fx, fy), (fx + fw, fy + fh), (0, 255, 0), 2)
                GUI.showImage(frontal_image)
    else:
        face_detected = False

# Additional code for continuous image display
while True:
    x_pos, y_pos = HAL.get_position()[:2]
    frontal_image = HAL.get_frontal_image()
    ventral_image = HAL.get_ventral_image()
    GUI.showImage(frontal_image)
    GUI.showLeftImage(ventral_image)
    print('Current Drone Position: lat=%.8f, lon=%.8f ' % (x_pos, y_pos))
